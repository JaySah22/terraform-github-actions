name: Terraform Cloud Github actions WorkfloW

on:
  push:
    branches:
      - my-poc

  workflow_dispatch:    

jobs:
    terraform:
      name: 'Terraform'
      runs-on: ubuntu-latest

      # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
      defaults:
        run:
          shell: bash
  
      steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      #  # Import the workspace variables from tfvar      
      # - name: Read TFVars Value
      #   id: workspace_name
      #   run: |
      #      # Load the content of the TFVars file
      #      TFVARS_CONTENT=$(cat terraform.tfvars)
 
      #      # Extract the specific variable value
      #      workspace=$(echo "$TFVARS_CONTENT" | grep -Eo 'workspace_name\s*=\s*"[^"]+"' | awk -F'"' '{print $2}')
 
      #      # Now use $Workspace in subsequent steps or output it as needed
      #      echo "workspace=$workspace" >> $GITHUB_OUTPUT
      #      echo "workspace: $workspace"
      #      export TF_WORKSPACE=$workspace  
  
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.5"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }} 

      - name: Install mailutils
        run: sudo apt-get update && sudo apt-get install -y mailutils      

      - name: Generate backend.hcl
        run: |
            #!/bin/bash
            
            # Specify the path to your .tfvars file
            tfvars_file="terraform.tfvars"

            # Debugging: Print the current directory
            echo "Current directory: $(pwd)"
            echo $tfvars_file
            ls -l
            
            # Check if the .tfvars file exists
            if [ ! -f "$tfvars_file" ]; then
              echo "Error: .tfvars file not found."
              exit 1
            fi
            
            # Read the workspace_name variable from the .tfvars file
            workspace_name=$(grep -E '^workspace_name\s*=' "$tfvars_file" | awk -F'=' '{gsub(/[[:space:]]*/, "", $2); gsub("\"", "", $2); print $2}')
            
            # Check if the workspace_name variable is set
            if [ -z "$workspace_name" ]; then
              echo "Error: workspace_name variable not found in .tfvars file."
              exit 1
            fi
            
            output_file="backend.hcl"
            
            cat <<EOL > "$output_file"
            organization = "ecp-shell-prod"
                 workspaces {
                    name  = "$workspace_name"
                 }
            EOL
            
            echo "Terraform Configuration generated successfully in $output_file."    
            ls -l
            cat $output_file
            unset TF_WORKSPACE

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init -backend-config=backend.hcl

      # # List and Select terraform workspace
      # - name: Terraform workspace select
      #   run: |
      #     terraform workspace list
      #     terraform workspace select $workspace_name  

      # Show the selected terraform workspace
      - name: Terraform workspace show
        run: |
          terraform workspace show  
  
  
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false
      #   # env:
      #   #   ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      #   #   ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      #   #   ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      #   #   ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
      #   #   ARM_ENVIRONMENT: "public"
          
      - name: Terraform Apply
        id: terraform-apply
        run: terraform apply -auto-approve -input=false


      - name: Email to Notify success 
        if: steps.terraform-apply.outcome == 'success'  
        run : |
          echo "Terraform Apply Succeeded" | mail -s "github workflow" -a "From: ${{ github.actor }}@users.noreply.github.com" jayanta.saha@shell.com
  
      - name: Email to Notify failure
        if: failure()  
        run : |
            echo "Terraform Apply Failed" | mail -s "github workflow" -a "From: ${{ github.actor }}@users.noreply.github.com" jayanta.saha@shell.com    
  
  
  # # Send Email Notification    
  #   notify-success:
  #     runs-on: ubuntu-latest
  #     needs: terraform
  #     if: success()
  #     steps:
  #       - name: Install sendmail
  #         run: sudo apt-get update && sudo apt-get install -y mailutils
        
  #       - name: Send Success Email Notification
  #         # env:
  #         #     SMTP_SERVER: smtp.gmail.com
  #         #     SMTP_PORT: 587
  #         #     SMTP_USERNAME: jayanta.saha1022@gmail.com
  #         #     EMAIL_PAT: ${{ secrets.EMAIL01}}
  #         #     TO_EMAIL: jayanta.saha@shell.com
  #         #     FROM_EMAIL: ${{ github.actor }}@users.noreply.github.com
  #         run: |
  #           echo "Terraform Apply Succeeded" | mail -s "github workflow" -a "From: ${{ github.actor }}@users.noreply.github.com" saha.jayanta28@gmail.com

   
  #       #echo "Subject: Terraform Apply Succeeded" | sendmail -S $SMTP_SERVER:$SMTP_PORT -xu $SMTP_USERNAME -xp $EMAIL_PAT -f $FROM_EMAIL $TO_EMAIL
          
    
  #   notify-failure:
  #     runs-on: ubuntu-latest
  #     needs: terraform
  #     if: failure()
  #     steps:
  #       - name: Install sendmail
  #         run: sudo apt-get update && sudo apt-get install -y mailutils

  #       - name: Send Failure Email Notification
  #         # env:
  #         #   SMTP_SERVER: smtp.gmail.com
  #         #   SMTP_PORT: 587
  #         #   SMTP_USERNAME: jayanta.saha1022@gmail.com
  #         #   EMAIL_PAT: ${{ secrets.EMAIL01}}
  #         #   TO_EMAIL: jayanta.saha@shell.com
  #         #   FROM_EMAIL: ${{ github.actor }}@users.noreply.github.com
  #         run: |
  #           echo "Terraform Apply Failed" | mail -s "github workflow" -a "From: ${{ github.actor }}@users.noreply.github.com" jayanta.saha@shell.com
  #         # echo "Subject: Terraform Apply Failed" | sendmail -S $SMTP_SERVER:$SMTP_PORT -xu $SMTP_USERNAME -xp $EMAIL_PAT -f $FROM_EMAIL $TO_EMAIL

      
